import { DomElement } from 'htmlparser2';
import Promise from 'bluebird';
import { Context } from './Context';
import { PageSources } from '../Page/PageSources';
import VariableProcessor from '../variables/VariableProcessor';
export declare type NodeProcessorConfig = {
    baseUrl: string;
    baseUrlMap: Set<string>;
    rootPath: string;
    outputPath: string;
    ignore: string[];
    addressablePagesSource: string[];
    intrasiteLinkValidation: {
        enabled: boolean;
    };
    codeLineNumbers: boolean;
    plantumlCheck: boolean;
    headerIdMap: {
        [id: string]: number;
    };
};
export declare class NodeProcessor {
    private config;
    private pageSources;
    private variableProcessor;
    private pluginManager;
    private siteLinkManager;
    private userScriptsAndStyles;
    frontmatter: {
        [key: string]: string;
    };
    headTop: string[];
    headBottom: string[];
    scriptBottom: string[];
    markdownProcessor: any;
    footnoteProcessor: any;
    mdAttributeRenderer: any;
    pageNavProcessor: any;
    processedModals: {
        [id: string]: boolean;
    };
    constructor(config: NodeProcessorConfig, pageSources: PageSources, variableProcessor: VariableProcessor, pluginManager: any, siteLinkManager: any, userScriptsAndStyles: string[] | undefined, docId?: string);
    static _trimNodes(node: DomElement): void;
    static _isText(node: DomElement): boolean;
    _processFrontmatter(node: DomElement, context: Context): void;
    private static collectLayoutEl;
    /**
     * Removes the node if modal id already exists, processes node otherwise
     */
    private processModal;
    processNode(node: DomElement, context: Context): any;
    postProcessNode(node: DomElement): void;
    private traverse;
    process(file: string, content: string, cwf?: string, extraVariables?: {
        [variableName: string]: string;
    }): Promise<unknown>;
}
//# sourceMappingURL=NodeProcessor.d.ts.map