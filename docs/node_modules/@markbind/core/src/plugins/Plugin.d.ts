import { DomElement } from 'htmlparser2';
import { NodeProcessorConfig } from '../html/NodeProcessor';
export interface PluginContext {
    [key: string]: any;
}
export interface FrontMatter {
    [key: string]: any;
}
declare type TagConfigAttributes = {
    name: string;
    isRelative: boolean;
    isSourceFile: boolean;
};
export declare type TagConfigs = {
    isSpecial: boolean;
    attributes: TagConfigAttributes[];
};
/**
 * Wrapper class around a loaded plugin module
 */
export declare class Plugin {
    pluginName: string;
    plugin: {
        beforeSiteGenerate: (...args: any[]) => any;
        getLinks: (...args: any[]) => any;
        getScripts: (...args: any[]) => any;
        postRender: (pluginContext: PluginContext, frontmatter: FrontMatter, content: string) => string;
        processNode: (pluginContext: PluginContext, node: DomElement, config?: NodeProcessorConfig) => string;
        postProcessNode: (pluginContext: PluginContext, node: DomElement, config?: NodeProcessorConfig) => string;
        tagConfig: {
            [key: string]: TagConfigs;
        };
    };
    pluginOptions: PluginContext;
    pluginAbsolutePath: string;
    pluginAssetOutputPath: string;
    constructor(pluginName: string, pluginPath: string, pluginOptions: PluginContext, siteOutputPath: string);
    executeBeforeSiteGenerate(): void;
    /**
     * Resolves a resource specified as an attribute in a html asset tag
     * (eg. '<script>' or '<link>') provided by a plugin, and copies said asset
     * into the plugin's asset output folder.
     * Does nothing if the resource is a url.
     * @param assetElementHtml The asset element html, as a string, such as '<script src="...">'
     * @param tagName The name of the resource tag
     * @param attrName The attribute name where the resource is specified in the tag
     * @param baseUrl baseUrl of the site
     * @return String html of the element, with the attribute's asset resolved
     */
    _getResolvedAssetElement(assetElementHtml: string, tagName: string, attrName: string, baseUrl: string): string;
    /**
     * Collect page content inserted by plugins
     */
    getPageNjkLinksAndScripts(frontmatter: FrontMatter, content: string, baseUrl: string): {
        links: any;
        scripts: any;
    };
    postRender(frontmatter: FrontMatter, content: string): string;
    processNode(node: DomElement, config: NodeProcessorConfig): void;
    postProcessNode(node: DomElement, config: NodeProcessorConfig): void;
    getTagConfig(): {
        [key: string]: TagConfigs;
    };
}
export {};
//# sourceMappingURL=Plugin.d.ts.map