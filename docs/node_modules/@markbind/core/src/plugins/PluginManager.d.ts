import { DomElement } from 'htmlparser2';
import { FrontMatter, Plugin, PluginContext, TagConfigs } from './Plugin';
import { NodeProcessorConfig } from '../html/NodeProcessor';
declare type PageAsset = {
    pluginScripts: string[];
    pluginLinks: string[];
};
export declare class PluginManager {
    static tagConfig: {
        [key: string]: TagConfigs;
    };
    config: NodeProcessorConfig;
    plugins: {
        [key: string]: Plugin;
    };
    pluginsRaw: string[];
    pluginsContextRaw: PluginContext;
    htmlBeautifyOptions: {
        [key: string]: any;
    };
    constructor(config: NodeProcessorConfig, plugins: string[], pluginsContext: PluginContext);
    _setup(): void;
    /**
     * Load all plugins of the site
     */
    _collectPlugins(): void;
    /**
     * Loads a plugin
     * @param plugin name of the plugin
     * @param isDefault whether the plugin is a default plugin
     */
    _loadPlugin(plugin: string, isDefault: boolean): void;
    /**
     * Retrieves the correct plugin path for a plugin name that exists either in (in decreasing priority):
     * - the MarkBind project's 'plugins' folder
     * - the current folder (__dirname)
     * - the 'default' subdirectory under the current folder
     * - one of the environment's valid node_modules folders, as loaded by node's require(...) method
     * @param projectRootPath root of the MarkBind project
     * @param pluginName name of the plugin
     */
    static _getPluginPath(projectRootPath: string, pluginName: string): string;
    /**
     * Collects the tag configuration of the site's plugins, and injects them into the parsers.
     */
    _collectPluginTagConfigs(): void;
    /**
     * Run the beforeSiteGenerate hooks
     */
    beforeSiteGenerate(): void;
    /**
     * Run getLinks and getScripts hooks
     */
    collectPluginPageNjkAssets(frontmatter: FrontMatter, content: string, pageAsset: PageAsset): void;
    postRender(frontmatter: FrontMatter, content: string): string;
    processNode(node: DomElement): void;
    postProcessNode(node: DomElement): void;
}
export {};
//# sourceMappingURL=PluginManager.d.ts.map